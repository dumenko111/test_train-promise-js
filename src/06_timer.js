
const refs = {
  startBtn: document.querySelector('button[data-action-start'),
  stopBtn: document.querySelector('button[data-action-stop]'),
  clockface: document.querySelector('.js-clockface')
}


class Timer { 
  constructor({ onTick }) { //–¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É—î–º–æ
    this.intervalId = null;
    this.isActive = false;
    this.onTick = onTick;

    this.init()
  }

  init() {//–º–µ—Ç–æ–¥ –∫–ª–∞—Å—É!!!
    const time = this.getTimeComponents(0)
    this.onTick(time)
  }

  start() {//–º–µ—Ç–æ–¥ –∫–ª–∞—Å—É!!!
    if (this.isActive) {
      return
    }
    const startTime = Date.now();
    this.isActive = true;

    this.intervalId =  setInterval(() => {
      const currentTime = Date.now();
      const deltaTime = currentTime - startTime;//–ø–µ—Ä–µ–¥–∞—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ currentTime i startTime
      // console.log(deltaTime)

      const time = this.getTimeComponents(deltaTime)//–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ-—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –≤ –≥–æ–¥, —Ö–≤ —ñ —Å–µ–∫—É–Ω–¥–∏ / —Ç–∞–∫–æ–∂ —Ä–æ–±–∏–º–æ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—éü•≤
      this.onTick(time)
    }, 1000)
  }

  stop() {  //–º–µ—Ç–æ–¥ –∫–ª–∞—Å—É!!!
    clearInterval(this.intervalId)
    this.isActive = false
    const time = this.getTimeComponents(0)
    this.onTick(time)
  }

  /*–¶–Ø –§-–¶–Ü–Ø –ü–†–ò–ô–ú–ê–Ñ –ß–ê–° –í –ú–Ü–õ–Ü–°–ï–ö–£–ù–î–ê–• - –í–ò–†–ê–•–û–í–£–Ñ –°-–ö–ò –í –ù–ò–• –ü–û–ú–Ü–©–ê–Ñ–¢–¨–°–Ø –ì–û–î–ò–ù.–•–í–ò–õ–ò–ù.–°–ï–ö–£–ù–î
  –ü–û–í–ï–†–¢–ê–Ñ –û–ë'–Ñ–ö–¢ –Ü–ó –ó–ù–ê–ß–ï–ù–ù–Ø–ú–ò hours, mins, secs */
  getTimeComponents(time) { //–º–µ—Ç–æ–¥ –∫–ª–∞—Å—É!!!
    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
    const mins = this.pad(Math.floor((time % 1000 * 60 * 60) / (1000 * 60)));
    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));

    return {hours, mins, secs}
  }

  /*–¶–Ø –§-–¶–Ü–Ø –ü–†–ò–ô–ú–ê–Ñ –ß–ò–°–õ–û, –ü–†–ò–í–û–î–ò–¢–¨ –ô–û–ì–û –î–û –°–¢–†–û–ö–ò –Ü –î–û–ë–ê–í–õ–Ø–Ñ –í –ü–û–ß–ê–¢–û–ö, –Ø–ö–©–û –ß–ò–°–õ–û –ú–ï–ù–®–ï 2—Ö –ó–ù–ê–ö–Ü–í 0, –Ø–ö–©–û –ß–ò–°–õ–û –î–í–û–ó–ù–ê–ß–ù–ï - –ù–Ü–ß–û–ì–û –ù–ï –†–û–ë–ò–¢–¨ */
  pad(value) {
    return String(value).padStart(2, '0')
}
}

const timer = new Timer({ onTick: updateClockface })//–ø–µ—Ä–µ–¥–∞—î–º–æ —Ñ-—Ü—ñ—é updateClockface –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–∫ –æ–±'—î–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–æ–∫

refs.startBtn.addEventListener('click', timer.start.bind(timer))
refs.stopBtn.addEventListener('click', timer.stop.bind(timer))

function updateClockface({ hours, mins, secs }) {
  refs.clockface.textContent = `${hours}:${mins}:${secs}`
}

